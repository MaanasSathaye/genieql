package examples

import (
	"database/sql"
	"time"

	"github.com/lib/pq"
)

// DO NOT MODIFY: This File was auto generated by the following command:
// genieql scanner default --config=scanner-test.config --output=type1_scanner.gen.go bitbucket.org/jatone/genieql/scanner/internal/examples.Type1 type1
// invoked by go generate @ examples/type1.go line 8

type Type1Scanner interface {
	Scan(arg0 *Type1) error
	Next() bool
	Close() error
	Err() error
}

type Type1RowScanner interface {
	Scan(arg0 *Type1) error
}

type Type1ErrScanner struct {
	err error
}

func (t Type1ErrScanner) Scan(arg0 *Type1) error {
	return t.err
}
func (t Type1ErrScanner) Err() error {
	return t.err
}
func (t Type1ErrScanner) Close() error {
	return nil
}
func (t Type1ErrScanner) Next() bool {
	return false
}

func NewType1StaticScanner(rows *sql.Rows, err error) Type1Scanner {
	if err != nil {
		return Type1ErrScanner{err: err}
	}
	return Type1StaticScanner{Rows: rows}
}

func NewType1StaticRowScanner(row *sql.Row) Type1RowScanner {
	return Type1StaticRowScanner{row: row}
}

const Type1StaticScannerColumns = `field1,field2,field3,field4,field5,field6,field7,field8`

type Type1StaticScanner struct {
	Rows *sql.Rows
}

func (t Type1StaticScanner) Scan(arg0 *Type1) error {
	var c0 string
	var c1 sql.NullString
	var c2 bool
	var c3 sql.NullBool
	var c4 int
	var c5 sql.NullInt64
	var c6 time.Time
	var c7 pq.NullTime
	if err := t.Rows.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7); err != nil {
		return err
	}
	arg0.Field1 = c0
	if c1.Valid {
		tmp := c1.String
		arg0.Field2 = &tmp
	}
	arg0.Field3 = c2
	if c3.Valid {
		tmp := c3.Bool
		arg0.Field4 = &tmp
	}
	arg0.Field5 = c4
	if c5.Valid {
		tmp := int(c5.Int64)
		arg0.Field6 = &tmp
	}
	arg0.Field7 = c6
	if c7.Valid {
		tmp := c7.Time
		arg0.Field8 = &tmp
	}
	return t.Rows.Err()
}
func (t Type1StaticScanner) Err() error {
	return t.Rows.Err()
}
func (t Type1StaticScanner) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}
func (t Type1StaticScanner) Next() bool {
	return t.Rows.Next()
}

type Type1StaticRowScanner struct {
	row *sql.Row
}

func (t Type1StaticRowScanner) Scan(arg0 *Type1) error {
	var c0 string
	var c1 sql.NullString
	var c2 bool
	var c3 sql.NullBool
	var c4 int
	var c5 sql.NullInt64
	var c6 time.Time
	var c7 pq.NullTime
	if err := t.row.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7); err != nil {
		return err
	}
	arg0.Field1 = c0
	if c1.Valid {
		tmp := c1.String
		arg0.Field2 = &tmp
	}
	arg0.Field3 = c2
	if c3.Valid {
		tmp := c3.Bool
		arg0.Field4 = &tmp
	}
	arg0.Field5 = c4
	if c5.Valid {
		tmp := int(c5.Int64)
		arg0.Field6 = &tmp
	}
	arg0.Field7 = c6
	if c7.Valid {
		tmp := c7.Time
		arg0.Field8 = &tmp
	}
	return nil
}
