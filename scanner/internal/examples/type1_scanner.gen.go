package examples

import (
	"database/sql"

	"github.com/lib/pq"
)

// DO NOT MODIFY: This File was auto generated by the following command:
// genieql scanner default --config=scanner-test.config --output=type1_scanner.gen.go bitbucket.org/jatone/genieql/scanner/internal/examples.Type1 type1
// invoked by go generate @ examples/type1.go line 10

const Type1StaticScannerStaticColumns = "field1,field2,field3,field4,field5,field6,field7,field8"

// Type1Scanner scanner interface.
type Type1Scanner interface {
	Scan(arg0 *Type1) error
	Next() bool
	Close() error
	Err() error
}

type errType1Scanner struct {
	e error
}

func (t errType1Scanner) Scan(arg0 *Type1) error {
	return t.e
}

func (t errType1Scanner) Next() bool {
	return false
}

func (t errType1Scanner) Err() error {
	return t.e
}

func (t errType1Scanner) Close() error {
	return nil
}

// StaticType1StaticScanner creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func StaticType1StaticScanner(rows *sql.Rows, err error) Type1Scanner {
	if err != nil {
		return errType1Scanner{e: err}
	}

	return staticType1StaticScanner{
		Rows: rows,
	}
}

type staticType1StaticScanner struct {
	Rows *sql.Rows
}

func (t staticType1StaticScanner) Scan(arg0 *Type1) error {
	var (
		c0 sql.NullString
		c1 sql.NullString
		c2 sql.NullBool
		c3 sql.NullBool
		c4 sql.NullInt64
		c5 sql.NullInt64
		c6 pq.NullTime
		c7 pq.NullTime
	)

	if err := t.Rows.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7); err != nil {
		return err
	}

	if c0.Valid {
		tmp := c0.String
		arg0.Field1 = tmp
	}

	if c1.Valid {
		tmp := c1.String
		arg0.Field2 = &tmp
	}

	if c2.Valid {
		tmp := c2.Bool
		arg0.Field3 = tmp
	}

	if c3.Valid {
		tmp := c3.Bool
		arg0.Field4 = &tmp
	}

	if c4.Valid {
		tmp := int(c4.Int64)
		arg0.Field5 = tmp
	}

	if c5.Valid {
		tmp := int(c5.Int64)
		arg0.Field6 = &tmp
	}

	if c6.Valid {
		tmp := c6.Time
		arg0.Field7 = tmp
	}

	if c7.Valid {
		tmp := c7.Time
		arg0.Field8 = &tmp
	}

	return t.Rows.Err()
}

func (t staticType1StaticScanner) Err() error {
	return t.Rows.Err()
}

func (t staticType1StaticScanner) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

func (t staticType1StaticScanner) Next() bool {
	return t.Rows.Next()
}

// NewStaticRowType1StaticScanner creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewStaticRowType1StaticScanner(row *sql.Row) StaticRowType1StaticScanner {
	return StaticRowType1StaticScanner{
		row: row,
	}
}

type StaticRowType1StaticScanner struct {
	row *sql.Row
}

func (t StaticRowType1StaticScanner) Scan(arg0 *Type1) error {
	var (
		c0 sql.NullString
		c1 sql.NullString
		c2 sql.NullBool
		c3 sql.NullBool
		c4 sql.NullInt64
		c5 sql.NullInt64
		c6 pq.NullTime
		c7 pq.NullTime
	)

	if err := t.row.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7); err != nil {
		return err
	}

	if c0.Valid {
		tmp := c0.String
		arg0.Field1 = tmp
	}

	if c1.Valid {
		tmp := c1.String
		arg0.Field2 = &tmp
	}

	if c2.Valid {
		tmp := c2.Bool
		arg0.Field3 = tmp
	}

	if c3.Valid {
		tmp := c3.Bool
		arg0.Field4 = &tmp
	}

	if c4.Valid {
		tmp := int(c4.Int64)
		arg0.Field5 = tmp
	}

	if c5.Valid {
		tmp := int(c5.Int64)
		arg0.Field6 = &tmp
	}

	if c6.Valid {
		tmp := c6.Time
		arg0.Field7 = tmp
	}

	if c7.Valid {
		tmp := c7.Time
		arg0.Field8 = &tmp
	}

	return nil
}
