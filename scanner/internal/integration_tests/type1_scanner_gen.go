package integration_tests

import "database/sql"

// DO NOT MODIFY: This File was auto generated by the following command:
// genieql scanner default --config=scanner-test.config --output=type1_scanner_gen.go bitbucket.org/jatone/genieql/scanner/internal/integration_tests.Type1 type1

func NewType1Scanner(rows *sql.Rows, err error) Type1Scanner {
	if err != nil {
		return errType1Scanner{err: err}
	}
	return type1scanner{rows: rows}
}

func NewType1RowScanner(row *sql.Row) Type1RowScanner {
	return rowType1Scanner{row: row}
}

type Type1Scanner interface {
	Scan(arg0 *Type1) error
	Next() bool
	Close() error
	Err() error
}

type Type1RowScanner interface {
	Scan(arg0 *Type1) error
}

type type1scanner struct {
	rows *sql.Rows
}

func (t type1scanner) Scan(arg0 *Type1) error {
	var c0 string
	var c1 sql.NullString
	var c2 bool
	var c3 sql.NullBool
	var c4 int
	var c5 sql.NullInt64
	if err := t.rows.Scan(&c0, &c1, &c2, &c3, &c4, &c5); err != nil {
		return err
	}
	arg0.Field1 = c0
	if c1.Valid {
		tmp := c1.String
		arg0.Field2 = &tmp
	}
	arg0.Field3 = c2
	if c3.Valid {
		tmp := c3.Bool
		arg0.Field4 = &tmp
	}
	arg0.Field5 = c4
	if c5.Valid {
		tmp := int(c5.Int64)
		arg0.Field6 = &tmp
	}
	return t.rows.Err()
}
func (t type1scanner) Err() error {
	return t.rows.Err()
}
func (t type1scanner) Close() error {
	if t.rows == nil {
		return nil
	}
	return t.rows.Close()
}
func (t type1scanner) Next() bool {
	return t.rows.Next()
}

type rowType1Scanner struct {
	row *sql.Row
}

func (t rowType1Scanner) Scan(arg0 *Type1) error {
	var c0 string
	var c1 sql.NullString
	var c2 bool
	var c3 sql.NullBool
	var c4 int
	var c5 sql.NullInt64
	if err := t.row.Scan(&c0, &c1, &c2, &c3, &c4, &c5); err != nil {
		return err
	}
	arg0.Field1 = c0
	if c1.Valid {
		tmp := c1.String
		arg0.Field2 = &tmp
	}
	arg0.Field3 = c2
	if c3.Valid {
		tmp := c3.Bool
		arg0.Field4 = &tmp
	}
	arg0.Field5 = c4
	if c5.Valid {
		tmp := int(c5.Int64)
		arg0.Field6 = &tmp
	}
	return nil
}

type errType1Scanner struct {
	err error
}

func (t errType1Scanner) Scan(arg0 *Type1) error {
	return t.err
}
func (t errType1Scanner) Err() error {
	return t.err
}
func (t errType1Scanner) Close() error {
	return nil
}
func (t errType1Scanner) Next() bool {
	return false
}
