package example

import (
	"context"

	"bitbucket.org/jatone/genieql/internal/sqlx"
)

// BatchInsertExample1 generated by genieql
func NewBatchInsertExample1(ctx context.Context, q sqlx.Queryer, a ...StructA) ExampleScanner {
	return &batchInsertExample1{ctx: ctx, q: q, remaining: a}
}

type batchInsertExample1 struct {
	ctx       context.Context
	q         sqlx.Queryer
	remaining []StructA
}

func (t *batchInsertExample1) Scan(a *StructA) error {
	return t.scanner.Scan(a)
}

func (t *batchInsertExample1) Err() error {
	if t.scanner == nil {
		return nil
	}
	return t.scanner.Err()
}

func (t *batchInsertExample1) Close() error {
	if t.scanner == nil {
		return nil
	}
	return t.scanner.Close()
}

func (t *batchInsertExample1) Next() bool {
	var (
		advanced bool
	)
	if t.scanner != nil && t.scanner.Next() {
		return true
	}
	if len(t.remaining) > 0 && t.Close() == nil {
		t.scanner, t.remaining, advanced = t.advance(t.remaining...)
		return advanced && t.scanner.Next()
	}
	return false
}

func (t *batchInsertExample1) advance(a ...StructA) (ExampleScanner, []StructA, bool) {
	switch len(a) {
	case 0:
		return nil, []StructA(nil), false
	case 1:
		return NewExampleScannerStatic(t.q.QueryContext(t.ctx, query, tmp[:]...)), []StructA(nil), false
	default:
		return NewExampleScannerStatic(t.q.QueryContext(t.ctx, query, tmp[:]...)), a[2:], true
	}
}
