// Package genieql generates code to interact with a database.
package genieql

import (
	"database/sql"
	"go/ast"
	"go/format"
	"go/token"
	"io"

	"golang.org/x/tools/imports"
)

// Preface text inserted at the top of all generated files.
const Preface = `

// DO NOT MODIFY: This File was auto generated by the following command:
// genieql %s
`

// TableDetails provides information about the table.
type TableDetails struct {
	Dialect    Dialect
	Table      string
	Naturalkey []string
	Columns    []string
}

// OnlyMappedColumns filters out columns from the current TableDetails that do not
// exist in the destination structure. Mainly used for generating queries.
func (t TableDetails) OnlyMappedColumns(fields []*ast.Field, aliases ...Aliaser) TableDetails {
	dup := t
	dup.Columns = make([]string, 0, len(t.Columns))
	for _, column := range t.Columns {
		for _, field := range fields {
			if _, matched, _ := MapFieldToColumn(column, 0, field, aliases...); matched {
				dup.Columns = append(dup.Columns, column)
			}
		}
	}

	return dup
}

// ScannerGenerator interface for scanner generators.
type ScannerGenerator interface {
	Scanner(dst io.Writer, fset *token.FileSet) error
}

// FormatOutput formats and resolves imports for the raw bytes representing a go
// source file and writes them into the dst.
func FormatOutput(dst io.Writer, raw []byte) error {
	var err error

	if raw, err = imports.Process("", raw, nil); err != nil {
		return err
	}

	if raw, err = format.Source(raw); err != nil {
		return err
	}

	_, err = dst.Write(raw)
	return err
}

// LoadInformation loads table information based on the configuration and
// table name.
func LoadInformation(configuration Configuration, table string) (TableDetails, error) {
	var err error
	var db *sql.DB
	var dialect Dialect
	var details TableDetails

	if db, err = ConnectDB(configuration); err != nil {
		return details, err
	}

	dialect, err = LookupDialect(configuration.Dialect)
	if err != nil {
		return details, err
	}

	details, err = LookupTableDetails(db, dialect, table)

	return details, err
}
