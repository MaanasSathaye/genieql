// Package genieql generates code to interact with a database.
package genieql

import (
	"go/ast"
	"go/format"
	"io"
	"log"
	"os"
	"path/filepath"

	"github.com/pkg/errors"
	"golang.org/x/tools/imports"
)

// Preface text inserted at the top of all generated files.
const Preface = `

// DO NOT MODIFY: This File was auto generated by the following command:
// genieql %s
`

// TableDetails provides information about the table.
type TableDetails struct {
	Dialect         Dialect
	Table           string
	Naturalkey      []string
	Columns         []string
	UnmappedColumns []string
}

// OnlyMappedColumns filters out columns from the current TableDetails that do not
// exist in the destination structure. Mainly used for generating queries.
func (t TableDetails) OnlyMappedColumns(fields []*ast.Field, aliases ...Aliaser) TableDetails {
	dup := t

	if len(fields) == 0 {
		dup.Columns = []string{}
		dup.UnmappedColumns = append(dup.UnmappedColumns, t.Columns...)
		return dup
	}

	dup.Columns = make([]string, 0, len(t.Columns))
	dup.UnmappedColumns = make([]string, 0, len(t.Columns))

	for _, column := range t.Columns {
		var mapped bool
		for _, field := range fields {
			if _, matched, _ := MapFieldToColumn(column, 0, field, aliases...); matched {
				mapped = true
				dup.Columns = append(dup.Columns, column)
			}
		}
		if !mapped {
			dup.UnmappedColumns = append(dup.UnmappedColumns, column)
		}
	}

	return dup
}

// FormatOutput formats and resolves imports for the raw bytes representing a go
// source file and writes them into the dst.
func FormatOutput(dst io.Writer, raw []byte) error {
	var err error

	if raw, err = imports.Process("", raw, nil); err != nil {
		return errors.Wrap(err, "failed to add required imports")
	}

	if raw, err = format.Source(raw); err != nil {
		return errors.Wrap(err, "failed to format source")
	}

	_, err = dst.Write(raw)
	return errors.Wrap(err, "failed to write to completed code to destination")
}

// LoadInformation loads table information based on the configuration and
// table name.
func LoadInformation(configuration Configuration, table string) (TableDetails, error) {
	var (
		err     error
		dialect Dialect
		details TableDetails
	)

	if dialect, err = LookupDialect(configuration); err != nil {
		return details, err
	}

	details, err = LookupTableDetails(dialect, table)

	return details, err
}

// ConfigurationDirectory determines the configuration directory based on the
// go environment.
func ConfigurationDirectory() string {
	var err error
	var defaultPath string
	paths := filepath.SplitList(os.Getenv("GOPATH"))
	if len(paths) == 0 {
		if defaultPath, err = os.Getwd(); err != nil {
			log.Fatalln(err)
		}
	} else {
		defaultPath = paths[0]
	}

	return filepath.Join(defaultPath, ".genieql")
}
