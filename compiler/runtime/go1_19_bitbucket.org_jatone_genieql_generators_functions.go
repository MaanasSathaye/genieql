// Code generated by 'yaegi extract bitbucket.org/jatone/genieql/generators/functions'. DO NOT EDIT.

package runtime

// import (
// 	"bitbucket.org/jatone/genieql/generators/functions"
// 	"reflect"
// )

// func init() {
// 	Symbols["bitbucket.org/jatone/genieql/generators/functions/functions"] = map[string]reflect.Value{
// 		// function, constant and variable definitions
// 		"Compile":                       reflect.ValueOf(functions.Compile),
// 		"CompileInto":                   reflect.ValueOf(functions.CompileInto),
// 		"DetectContext":                 reflect.ValueOf(functions.DetectContext),
// 		"DetectQueryer":                 reflect.ValueOf(functions.DetectQueryer),
// 		"DetectScanner":                 reflect.ValueOf(functions.DetectScanner),
// 		"New":                           reflect.ValueOf(functions.New),
// 		"NewFn":                         reflect.ValueOf(functions.NewFn),
// 		"OptionNoop":                    reflect.ValueOf(functions.OptionNoop),
// 		"OptionRecv":                    reflect.ValueOf(functions.OptionRecv),
// 		"QueryInputsFromFields":         reflect.ValueOf(functions.QueryInputsFromFields),
// 		"QueryLiteralColumnMapReplacer": reflect.ValueOf(functions.QueryLiteralColumnMapReplacer),
// 		"SanitizeQueryIdents":           reflect.ValueOf(functions.SanitizeQueryIdents),

// 		// type definitions
// 		"Body":       reflect.ValueOf((*functions.Body)(nil)),
// 		"Definition": reflect.ValueOf((*functions.Definition)(nil)),
// 		"Option":     reflect.ValueOf((*functions.Option)(nil)),
// 		"Query":      reflect.ValueOf((*functions.Query)(nil)),
// 	}
// }
