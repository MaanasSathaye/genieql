package definitions

import (
	"math"
	"time"

	"bitbucket.org/jatone/genieql/internal/sqlx"
	"github.com/jackc/pgtype"
)

// DO NOT MODIFY: This File was auto generated by the following command:
// genieql generate insert experimental batch-function -o postgresql.insert.batch.gen.go
// invoked by go generate @ definitions/example.go line 8

// NewExample1BatchInsertFunction creates a scanner that inserts a batch of
// records into the database.
func NewExample1BatchInsertFunction(q sqlx.Queryer, p ...Example1) Example1Scanner {
	return &example1BatchInsertFunction{
		q:         q,
		remaining: p,
	}
}

type example1BatchInsertFunction struct {
	q         sqlx.Queryer
	remaining []Example1
	scanner   Example1Scanner
}

func (t *example1BatchInsertFunction) Scan(dst *Example1) error {
	return t.scanner.Scan(dst)
}

func (t *example1BatchInsertFunction) Err() error {
	if t.scanner == nil {
		return nil
	}

	return t.scanner.Err()
}

func (t *example1BatchInsertFunction) Close() error {
	if t.scanner == nil {
		return nil
	}
	return t.scanner.Close()
}

func (t *example1BatchInsertFunction) Next() bool {
	var (
		advanced bool
	)

	if t.scanner != nil && t.scanner.Next() {
		return true
	}

	// advance to the next check
	if len(t.remaining) > 0 && t.Close() == nil {
		t.scanner, t.remaining, advanced = t.advance(t.q, t.remaining...)
		return advanced && t.scanner.Next()
	}

	return false
}

func (t *example1BatchInsertFunction) advance(q sqlx.Queryer, p ...Example1) (Example1Scanner, []Example1, bool) {
	switch len(p) {
	case 0:
		return nil, []Example1(nil), false
	case 1:
		const query = `INSERT INTO example1 ("bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26) RETURNING "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`
		exploder := func(p ...Example1) (r [26]interface{}, err error) {
			for idx, v := range p[:1] {
				var (
					c0  pgtype.Int8
					c1  pgtype.Bit
					c2  pgtype.Varbit
					c3  pgtype.Bool
					c4  pgtype.Bytea
					c5  pgtype.Varchar
					c6  pgtype.BPChar
					c7  pgtype.CIDR
					c8  pgtype.Numeric
					c9  pgtype.Float8
					c10 pgtype.Inet
					c11 pgtype.Int2Array
					c12 pgtype.Int4Array
					c13 pgtype.Int8Array
					c14 pgtype.Int4
					c15 pgtype.Interval
					c16 pgtype.JSON
					c17 pgtype.JSONB
					c18 pgtype.Macaddr
					c19 pgtype.Numeric
					c20 pgtype.Float4
					c21 pgtype.Int2
					c22 pgtype.Text
					c23 pgtype.Timestamptz
					c24 pgtype.UUIDArray
					c25 pgtype.UUID
				)
				if err := c0.Set(v.BigintField); err != nil {
					return r, err
				}
				if err := c1.Set(v.BitField); err != nil {
					return r, err
				}
				if err := c2.Set(v.BitVaryingField); err != nil {
					return r, err
				}
				if err := c3.Set(v.BoolField); err != nil {
					return r, err
				}
				if err := c4.Set(v.ByteArrayField); err != nil {
					return r, err
				}
				if err := c5.Set(v.CharacterField); err != nil {
					return r, err
				}
				if err := c6.Set(v.CharacterFixedField); err != nil {
					return r, err
				}
				if err := c7.Set(v.CidrField); err != nil {
					return r, err
				}
				if err := c8.Set(v.DecimalField); err != nil {
					return r, err
				}
				if err := c9.Set(v.DoublePrecisionField); err != nil {
					return r, err
				}
				if err := c10.Set(v.InetField); err != nil {
					return r, err
				}
				if err := c11.Set(v.Int2Array); err != nil {
					return r, err
				}
				if err := c12.Set(v.Int4Array); err != nil {
					return r, err
				}
				if err := c13.Set(v.Int8Array); err != nil {
					return r, err
				}
				if err := c14.Set(v.IntField); err != nil {
					return r, err
				}
				if err := c15.Set(v.IntervalField); err != nil {
					return r, err
				}
				if err := c16.Set(v.JSONField); err != nil {
					return r, err
				}
				if err := c17.Set(v.JsonbField); err != nil {
					return r, err
				}
				if err := c18.Set(v.MacaddrField); err != nil {
					return r, err
				}
				if err := c19.Set(v.NumericField); err != nil {
					return r, err
				}
				if err := c20.Set(v.RealField); err != nil {
					return r, err
				}
				if err := c21.Set(v.SmallintField); err != nil {
					return r, err
				}
				if err := c22.Set(v.TextField); err != nil {
					return r, err
				}
				switch v.TimestampField {
				case time.Unix(math.MaxInt64-62135596800, 999999999):
					if err := c23.Set(pgtype.Infinity); err != nil {
						return r, err
					}
				case time.Unix(math.MinInt64, math.MinInt64):
					if err := c23.Set(pgtype.NegativeInfinity); err != nil {
						return r, err
					}
				default:
					if err := c23.Set(v.TimestampField); err != nil {
						return r, err
					}
				}
				if err := c24.Set(v.UUIDArray); err != nil {
					return r, err
				}
				if err := c25.Set(v.UUIDField); err != nil {
					return r, err
				}
				r[idx*26+0], r[idx*26+1], r[idx*26+2], r[idx*26+3], r[idx*26+4], r[idx*26+5], r[idx*26+6], r[idx*26+7], r[idx*26+8], r[idx*26+9], r[idx*26+10], r[idx*26+11], r[idx*26+12], r[idx*26+13], r[idx*26+14], r[idx*26+15], r[idx*26+16], r[idx*26+17], r[idx*26+18], r[idx*26+19], r[idx*26+20], r[idx*26+21], r[idx*26+22], r[idx*26+23], r[idx*26+24], r[idx*26+25] = c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25
			}
			return r, nil
		}

		tmp, err := exploder(p...)

		if err != nil {
			return NewExample1ScannerStatic(nil, err), []Example1(nil), false
		}

		return NewExample1ScannerStatic(q.Query(query, tmp[:]...)), []Example1(nil), true
	case 2:
		const query = `INSERT INTO example1 ("bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26),($27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52) RETURNING "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`
		exploder := func(p ...Example1) (r [52]interface{}, err error) {
			for idx, v := range p[:2] {
				var (
					c0  pgtype.Int8
					c1  pgtype.Bit
					c2  pgtype.Varbit
					c3  pgtype.Bool
					c4  pgtype.Bytea
					c5  pgtype.Varchar
					c6  pgtype.BPChar
					c7  pgtype.CIDR
					c8  pgtype.Numeric
					c9  pgtype.Float8
					c10 pgtype.Inet
					c11 pgtype.Int2Array
					c12 pgtype.Int4Array
					c13 pgtype.Int8Array
					c14 pgtype.Int4
					c15 pgtype.Interval
					c16 pgtype.JSON
					c17 pgtype.JSONB
					c18 pgtype.Macaddr
					c19 pgtype.Numeric
					c20 pgtype.Float4
					c21 pgtype.Int2
					c22 pgtype.Text
					c23 pgtype.Timestamptz
					c24 pgtype.UUIDArray
					c25 pgtype.UUID
				)
				if err := c0.Set(v.BigintField); err != nil {
					return r, err
				}
				if err := c1.Set(v.BitField); err != nil {
					return r, err
				}
				if err := c2.Set(v.BitVaryingField); err != nil {
					return r, err
				}
				if err := c3.Set(v.BoolField); err != nil {
					return r, err
				}
				if err := c4.Set(v.ByteArrayField); err != nil {
					return r, err
				}
				if err := c5.Set(v.CharacterField); err != nil {
					return r, err
				}
				if err := c6.Set(v.CharacterFixedField); err != nil {
					return r, err
				}
				if err := c7.Set(v.CidrField); err != nil {
					return r, err
				}
				if err := c8.Set(v.DecimalField); err != nil {
					return r, err
				}
				if err := c9.Set(v.DoublePrecisionField); err != nil {
					return r, err
				}
				if err := c10.Set(v.InetField); err != nil {
					return r, err
				}
				if err := c11.Set(v.Int2Array); err != nil {
					return r, err
				}
				if err := c12.Set(v.Int4Array); err != nil {
					return r, err
				}
				if err := c13.Set(v.Int8Array); err != nil {
					return r, err
				}
				if err := c14.Set(v.IntField); err != nil {
					return r, err
				}
				if err := c15.Set(v.IntervalField); err != nil {
					return r, err
				}
				if err := c16.Set(v.JSONField); err != nil {
					return r, err
				}
				if err := c17.Set(v.JsonbField); err != nil {
					return r, err
				}
				if err := c18.Set(v.MacaddrField); err != nil {
					return r, err
				}
				if err := c19.Set(v.NumericField); err != nil {
					return r, err
				}
				if err := c20.Set(v.RealField); err != nil {
					return r, err
				}
				if err := c21.Set(v.SmallintField); err != nil {
					return r, err
				}
				if err := c22.Set(v.TextField); err != nil {
					return r, err
				}
				switch v.TimestampField {
				case time.Unix(math.MaxInt64-62135596800, 999999999):
					if err := c23.Set(pgtype.Infinity); err != nil {
						return r, err
					}
				case time.Unix(math.MinInt64, math.MinInt64):
					if err := c23.Set(pgtype.NegativeInfinity); err != nil {
						return r, err
					}
				default:
					if err := c23.Set(v.TimestampField); err != nil {
						return r, err
					}
				}
				if err := c24.Set(v.UUIDArray); err != nil {
					return r, err
				}
				if err := c25.Set(v.UUIDField); err != nil {
					return r, err
				}
				r[idx*26+0], r[idx*26+1], r[idx*26+2], r[idx*26+3], r[idx*26+4], r[idx*26+5], r[idx*26+6], r[idx*26+7], r[idx*26+8], r[idx*26+9], r[idx*26+10], r[idx*26+11], r[idx*26+12], r[idx*26+13], r[idx*26+14], r[idx*26+15], r[idx*26+16], r[idx*26+17], r[idx*26+18], r[idx*26+19], r[idx*26+20], r[idx*26+21], r[idx*26+22], r[idx*26+23], r[idx*26+24], r[idx*26+25] = c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25
			}
			return r, nil
		}

		tmp, err := exploder(p...)

		if err != nil {
			return NewExample1ScannerStatic(nil, err), []Example1(nil), false
		}

		return NewExample1ScannerStatic(q.Query(query, tmp[:]...)), []Example1(nil), true
	case 3:
		const query = `INSERT INTO example1 ("bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26),($27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52),($53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78) RETURNING "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`
		exploder := func(p ...Example1) (r [78]interface{}, err error) {
			for idx, v := range p[:3] {
				var (
					c0  pgtype.Int8
					c1  pgtype.Bit
					c2  pgtype.Varbit
					c3  pgtype.Bool
					c4  pgtype.Bytea
					c5  pgtype.Varchar
					c6  pgtype.BPChar
					c7  pgtype.CIDR
					c8  pgtype.Numeric
					c9  pgtype.Float8
					c10 pgtype.Inet
					c11 pgtype.Int2Array
					c12 pgtype.Int4Array
					c13 pgtype.Int8Array
					c14 pgtype.Int4
					c15 pgtype.Interval
					c16 pgtype.JSON
					c17 pgtype.JSONB
					c18 pgtype.Macaddr
					c19 pgtype.Numeric
					c20 pgtype.Float4
					c21 pgtype.Int2
					c22 pgtype.Text
					c23 pgtype.Timestamptz
					c24 pgtype.UUIDArray
					c25 pgtype.UUID
				)
				if err := c0.Set(v.BigintField); err != nil {
					return r, err
				}
				if err := c1.Set(v.BitField); err != nil {
					return r, err
				}
				if err := c2.Set(v.BitVaryingField); err != nil {
					return r, err
				}
				if err := c3.Set(v.BoolField); err != nil {
					return r, err
				}
				if err := c4.Set(v.ByteArrayField); err != nil {
					return r, err
				}
				if err := c5.Set(v.CharacterField); err != nil {
					return r, err
				}
				if err := c6.Set(v.CharacterFixedField); err != nil {
					return r, err
				}
				if err := c7.Set(v.CidrField); err != nil {
					return r, err
				}
				if err := c8.Set(v.DecimalField); err != nil {
					return r, err
				}
				if err := c9.Set(v.DoublePrecisionField); err != nil {
					return r, err
				}
				if err := c10.Set(v.InetField); err != nil {
					return r, err
				}
				if err := c11.Set(v.Int2Array); err != nil {
					return r, err
				}
				if err := c12.Set(v.Int4Array); err != nil {
					return r, err
				}
				if err := c13.Set(v.Int8Array); err != nil {
					return r, err
				}
				if err := c14.Set(v.IntField); err != nil {
					return r, err
				}
				if err := c15.Set(v.IntervalField); err != nil {
					return r, err
				}
				if err := c16.Set(v.JSONField); err != nil {
					return r, err
				}
				if err := c17.Set(v.JsonbField); err != nil {
					return r, err
				}
				if err := c18.Set(v.MacaddrField); err != nil {
					return r, err
				}
				if err := c19.Set(v.NumericField); err != nil {
					return r, err
				}
				if err := c20.Set(v.RealField); err != nil {
					return r, err
				}
				if err := c21.Set(v.SmallintField); err != nil {
					return r, err
				}
				if err := c22.Set(v.TextField); err != nil {
					return r, err
				}
				switch v.TimestampField {
				case time.Unix(math.MaxInt64-62135596800, 999999999):
					if err := c23.Set(pgtype.Infinity); err != nil {
						return r, err
					}
				case time.Unix(math.MinInt64, math.MinInt64):
					if err := c23.Set(pgtype.NegativeInfinity); err != nil {
						return r, err
					}
				default:
					if err := c23.Set(v.TimestampField); err != nil {
						return r, err
					}
				}
				if err := c24.Set(v.UUIDArray); err != nil {
					return r, err
				}
				if err := c25.Set(v.UUIDField); err != nil {
					return r, err
				}
				r[idx*26+0], r[idx*26+1], r[idx*26+2], r[idx*26+3], r[idx*26+4], r[idx*26+5], r[idx*26+6], r[idx*26+7], r[idx*26+8], r[idx*26+9], r[idx*26+10], r[idx*26+11], r[idx*26+12], r[idx*26+13], r[idx*26+14], r[idx*26+15], r[idx*26+16], r[idx*26+17], r[idx*26+18], r[idx*26+19], r[idx*26+20], r[idx*26+21], r[idx*26+22], r[idx*26+23], r[idx*26+24], r[idx*26+25] = c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25
			}
			return r, nil
		}

		tmp, err := exploder(p...)

		if err != nil {
			return NewExample1ScannerStatic(nil, err), []Example1(nil), false
		}

		return NewExample1ScannerStatic(q.Query(query, tmp[:]...)), []Example1(nil), true
	case 4:
		const query = `INSERT INTO example1 ("bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26),($27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52),($53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78),($79,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$90,$91,$92,$93,$94,$95,$96,$97,$98,$99,$100,$101,$102,$103,$104) RETURNING "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`
		exploder := func(p ...Example1) (r [104]interface{}, err error) {
			for idx, v := range p[:4] {
				var (
					c0  pgtype.Int8
					c1  pgtype.Bit
					c2  pgtype.Varbit
					c3  pgtype.Bool
					c4  pgtype.Bytea
					c5  pgtype.Varchar
					c6  pgtype.BPChar
					c7  pgtype.CIDR
					c8  pgtype.Numeric
					c9  pgtype.Float8
					c10 pgtype.Inet
					c11 pgtype.Int2Array
					c12 pgtype.Int4Array
					c13 pgtype.Int8Array
					c14 pgtype.Int4
					c15 pgtype.Interval
					c16 pgtype.JSON
					c17 pgtype.JSONB
					c18 pgtype.Macaddr
					c19 pgtype.Numeric
					c20 pgtype.Float4
					c21 pgtype.Int2
					c22 pgtype.Text
					c23 pgtype.Timestamptz
					c24 pgtype.UUIDArray
					c25 pgtype.UUID
				)
				if err := c0.Set(v.BigintField); err != nil {
					return r, err
				}
				if err := c1.Set(v.BitField); err != nil {
					return r, err
				}
				if err := c2.Set(v.BitVaryingField); err != nil {
					return r, err
				}
				if err := c3.Set(v.BoolField); err != nil {
					return r, err
				}
				if err := c4.Set(v.ByteArrayField); err != nil {
					return r, err
				}
				if err := c5.Set(v.CharacterField); err != nil {
					return r, err
				}
				if err := c6.Set(v.CharacterFixedField); err != nil {
					return r, err
				}
				if err := c7.Set(v.CidrField); err != nil {
					return r, err
				}
				if err := c8.Set(v.DecimalField); err != nil {
					return r, err
				}
				if err := c9.Set(v.DoublePrecisionField); err != nil {
					return r, err
				}
				if err := c10.Set(v.InetField); err != nil {
					return r, err
				}
				if err := c11.Set(v.Int2Array); err != nil {
					return r, err
				}
				if err := c12.Set(v.Int4Array); err != nil {
					return r, err
				}
				if err := c13.Set(v.Int8Array); err != nil {
					return r, err
				}
				if err := c14.Set(v.IntField); err != nil {
					return r, err
				}
				if err := c15.Set(v.IntervalField); err != nil {
					return r, err
				}
				if err := c16.Set(v.JSONField); err != nil {
					return r, err
				}
				if err := c17.Set(v.JsonbField); err != nil {
					return r, err
				}
				if err := c18.Set(v.MacaddrField); err != nil {
					return r, err
				}
				if err := c19.Set(v.NumericField); err != nil {
					return r, err
				}
				if err := c20.Set(v.RealField); err != nil {
					return r, err
				}
				if err := c21.Set(v.SmallintField); err != nil {
					return r, err
				}
				if err := c22.Set(v.TextField); err != nil {
					return r, err
				}
				switch v.TimestampField {
				case time.Unix(math.MaxInt64-62135596800, 999999999):
					if err := c23.Set(pgtype.Infinity); err != nil {
						return r, err
					}
				case time.Unix(math.MinInt64, math.MinInt64):
					if err := c23.Set(pgtype.NegativeInfinity); err != nil {
						return r, err
					}
				default:
					if err := c23.Set(v.TimestampField); err != nil {
						return r, err
					}
				}
				if err := c24.Set(v.UUIDArray); err != nil {
					return r, err
				}
				if err := c25.Set(v.UUIDField); err != nil {
					return r, err
				}
				r[idx*26+0], r[idx*26+1], r[idx*26+2], r[idx*26+3], r[idx*26+4], r[idx*26+5], r[idx*26+6], r[idx*26+7], r[idx*26+8], r[idx*26+9], r[idx*26+10], r[idx*26+11], r[idx*26+12], r[idx*26+13], r[idx*26+14], r[idx*26+15], r[idx*26+16], r[idx*26+17], r[idx*26+18], r[idx*26+19], r[idx*26+20], r[idx*26+21], r[idx*26+22], r[idx*26+23], r[idx*26+24], r[idx*26+25] = c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25
			}
			return r, nil
		}

		tmp, err := exploder(p...)

		if err != nil {
			return NewExample1ScannerStatic(nil, err), []Example1(nil), false
		}

		return NewExample1ScannerStatic(q.Query(query, tmp[:]...)), []Example1(nil), true
	default:
		const query = `INSERT INTO example1 ("bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26),($27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52),($53,$54,$55,$56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$72,$73,$74,$75,$76,$77,$78),($79,$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$90,$91,$92,$93,$94,$95,$96,$97,$98,$99,$100,$101,$102,$103,$104),($105,$106,$107,$108,$109,$110,$111,$112,$113,$114,$115,$116,$117,$118,$119,$120,$121,$122,$123,$124,$125,$126,$127,$128,$129,$130) RETURNING "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`
		exploder := func(p ...Example1) (r [130]interface{}, err error) {
			for idx, v := range p[:5] {
				var (
					c0  pgtype.Int8
					c1  pgtype.Bit
					c2  pgtype.Varbit
					c3  pgtype.Bool
					c4  pgtype.Bytea
					c5  pgtype.Varchar
					c6  pgtype.BPChar
					c7  pgtype.CIDR
					c8  pgtype.Numeric
					c9  pgtype.Float8
					c10 pgtype.Inet
					c11 pgtype.Int2Array
					c12 pgtype.Int4Array
					c13 pgtype.Int8Array
					c14 pgtype.Int4
					c15 pgtype.Interval
					c16 pgtype.JSON
					c17 pgtype.JSONB
					c18 pgtype.Macaddr
					c19 pgtype.Numeric
					c20 pgtype.Float4
					c21 pgtype.Int2
					c22 pgtype.Text
					c23 pgtype.Timestamptz
					c24 pgtype.UUIDArray
					c25 pgtype.UUID
				)
				if err := c0.Set(v.BigintField); err != nil {
					return r, err
				}
				if err := c1.Set(v.BitField); err != nil {
					return r, err
				}
				if err := c2.Set(v.BitVaryingField); err != nil {
					return r, err
				}
				if err := c3.Set(v.BoolField); err != nil {
					return r, err
				}
				if err := c4.Set(v.ByteArrayField); err != nil {
					return r, err
				}
				if err := c5.Set(v.CharacterField); err != nil {
					return r, err
				}
				if err := c6.Set(v.CharacterFixedField); err != nil {
					return r, err
				}
				if err := c7.Set(v.CidrField); err != nil {
					return r, err
				}
				if err := c8.Set(v.DecimalField); err != nil {
					return r, err
				}
				if err := c9.Set(v.DoublePrecisionField); err != nil {
					return r, err
				}
				if err := c10.Set(v.InetField); err != nil {
					return r, err
				}
				if err := c11.Set(v.Int2Array); err != nil {
					return r, err
				}
				if err := c12.Set(v.Int4Array); err != nil {
					return r, err
				}
				if err := c13.Set(v.Int8Array); err != nil {
					return r, err
				}
				if err := c14.Set(v.IntField); err != nil {
					return r, err
				}
				if err := c15.Set(v.IntervalField); err != nil {
					return r, err
				}
				if err := c16.Set(v.JSONField); err != nil {
					return r, err
				}
				if err := c17.Set(v.JsonbField); err != nil {
					return r, err
				}
				if err := c18.Set(v.MacaddrField); err != nil {
					return r, err
				}
				if err := c19.Set(v.NumericField); err != nil {
					return r, err
				}
				if err := c20.Set(v.RealField); err != nil {
					return r, err
				}
				if err := c21.Set(v.SmallintField); err != nil {
					return r, err
				}
				if err := c22.Set(v.TextField); err != nil {
					return r, err
				}
				switch v.TimestampField {
				case time.Unix(math.MaxInt64-62135596800, 999999999):
					if err := c23.Set(pgtype.Infinity); err != nil {
						return r, err
					}
				case time.Unix(math.MinInt64, math.MinInt64):
					if err := c23.Set(pgtype.NegativeInfinity); err != nil {
						return r, err
					}
				default:
					if err := c23.Set(v.TimestampField); err != nil {
						return r, err
					}
				}
				if err := c24.Set(v.UUIDArray); err != nil {
					return r, err
				}
				if err := c25.Set(v.UUIDField); err != nil {
					return r, err
				}
				r[idx*26+0], r[idx*26+1], r[idx*26+2], r[idx*26+3], r[idx*26+4], r[idx*26+5], r[idx*26+6], r[idx*26+7], r[idx*26+8], r[idx*26+9], r[idx*26+10], r[idx*26+11], r[idx*26+12], r[idx*26+13], r[idx*26+14], r[idx*26+15], r[idx*26+16], r[idx*26+17], r[idx*26+18], r[idx*26+19], r[idx*26+20], r[idx*26+21], r[idx*26+22], r[idx*26+23], r[idx*26+24], r[idx*26+25] = c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25
			}
			return r, nil
		}

		tmp, err := exploder(p[:5]...)

		if err != nil {
			return NewExample1ScannerStatic(nil, err), []Example1(nil), false
		}

		return NewExample1ScannerStatic(q.Query(query, tmp[:]...)), p[5:], true
	}
}
