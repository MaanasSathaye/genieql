package definitions

import "bitbucket.org/jatone/genieql/internal/sqlx"

// DO NOT MODIFY: This File was auto generated by the following command:
// genieql generate insert experimental batch-function -o postgresql.insert.batch.gen.go
// invoked by go generate @ definitions/example.go line 8

// NewExample1BatchInsertFunction creates a scanner that inserts a batch of
// records into the database.
func NewExample1BatchInsertFunction(q sqlx.Queryer, p ...Example1) Example1Scanner {
	return &example1BatchInsertFunction{
		q:         q,
		remaining: p,
	}
}

type example1BatchInsertFunction struct {
	q         sqlx.Queryer
	remaining []Example1
	scanner   Example1Scanner
}

func (t *example1BatchInsertFunction) Scan(dst *Example1) error {
	return t.scanner.Scan(dst)
}

func (t *example1BatchInsertFunction) Err() error {
	if t.scanner == nil {
		return nil
	}

	return t.scanner.Err()
}

func (t *example1BatchInsertFunction) Close() error {
	if t.scanner == nil {
		return nil
	}
	return t.scanner.Close()
}

func (t *example1BatchInsertFunction) Next() bool {
	var (
		advanced bool
	)

	if t.scanner != nil && t.scanner.Next() {
		return true
	}

	// advance to the next check
	if len(t.remaining) > 0 && t.Close() == nil {
		t.scanner, t.remaining, advanced = t.advance(t.q, t.remaining...)
		return advanced && t.scanner.Next()
	}

	return false
}

func (t *example1BatchInsertFunction) advance(q sqlx.Queryer, p ...Example1) (Example1Scanner, []Example1, bool) {
	switch len(p) {
	case 0:
		return nil, []Example1(nil), false
	case 1:
		const query = `INSERT INTO example1 (created_at,id,text_field,updated_at,uuid_field) VALUES (DEFAULT,$1,$2,DEFAULT,$3) RETURNING created_at,id,text_field,updated_at,uuid_field`
		exploder := func(p ...Example1) (r [5]interface{}) {
			for idx, v := range p[:1] {
				r[idx*5+0], r[idx*5+1], r[idx*5+2], r[idx*5+3], r[idx*5+4] = v.CreatedAt, v.ID, v.TextField, v.UpdatedAt, v.UUIDField
			}
			return
		}
		tmp := exploder(p...)
		return NewExample1ScannerStatic(q.Query(query, tmp[:]...)), []Example1(nil), true
	case 2:
		const query = `INSERT INTO example1 (created_at,id,text_field,updated_at,uuid_field) VALUES (DEFAULT,$1,$2,DEFAULT,$3),(DEFAULT,$4,$5,DEFAULT,$6) RETURNING created_at,id,text_field,updated_at,uuid_field`
		exploder := func(p ...Example1) (r [10]interface{}) {
			for idx, v := range p[:2] {
				r[idx*5+0], r[idx*5+1], r[idx*5+2], r[idx*5+3], r[idx*5+4] = v.CreatedAt, v.ID, v.TextField, v.UpdatedAt, v.UUIDField
			}
			return
		}
		tmp := exploder(p...)
		return NewExample1ScannerStatic(q.Query(query, tmp[:]...)), []Example1(nil), true
	case 3:
		const query = `INSERT INTO example1 (created_at,id,text_field,updated_at,uuid_field) VALUES (DEFAULT,$1,$2,DEFAULT,$3),(DEFAULT,$4,$5,DEFAULT,$6),(DEFAULT,$7,$8,DEFAULT,$9) RETURNING created_at,id,text_field,updated_at,uuid_field`
		exploder := func(p ...Example1) (r [15]interface{}) {
			for idx, v := range p[:3] {
				r[idx*5+0], r[idx*5+1], r[idx*5+2], r[idx*5+3], r[idx*5+4] = v.CreatedAt, v.ID, v.TextField, v.UpdatedAt, v.UUIDField
			}
			return
		}
		tmp := exploder(p...)
		return NewExample1ScannerStatic(q.Query(query, tmp[:]...)), []Example1(nil), true
	case 4:
		const query = `INSERT INTO example1 (created_at,id,text_field,updated_at,uuid_field) VALUES (DEFAULT,$1,$2,DEFAULT,$3),(DEFAULT,$4,$5,DEFAULT,$6),(DEFAULT,$7,$8,DEFAULT,$9),(DEFAULT,$10,$11,DEFAULT,$12) RETURNING created_at,id,text_field,updated_at,uuid_field`
		exploder := func(p ...Example1) (r [20]interface{}) {
			for idx, v := range p[:4] {
				r[idx*5+0], r[idx*5+1], r[idx*5+2], r[idx*5+3], r[idx*5+4] = v.CreatedAt, v.ID, v.TextField, v.UpdatedAt, v.UUIDField
			}
			return
		}
		tmp := exploder(p...)
		return NewExample1ScannerStatic(q.Query(query, tmp[:]...)), []Example1(nil), true
	default:
		const query = `INSERT INTO example1 (created_at,id,text_field,updated_at,uuid_field) VALUES (DEFAULT,$1,$2,DEFAULT,$3),(DEFAULT,$4,$5,DEFAULT,$6),(DEFAULT,$7,$8,DEFAULT,$9),(DEFAULT,$10,$11,DEFAULT,$12),(DEFAULT,$13,$14,DEFAULT,$15) RETURNING created_at,id,text_field,updated_at,uuid_field`
		exploder := func(p ...Example1) (r [25]interface{}) {
			for idx, v := range p[:5] {
				r[idx*5+0], r[idx*5+1], r[idx*5+2], r[idx*5+3], r[idx*5+4] = v.CreatedAt, v.ID, v.TextField, v.UpdatedAt, v.UUIDField
			}
			return
		}
		tmp := exploder(p[:5]...)
		return NewExample1ScannerStatic(q.Query(query, tmp[:]...)), p[5:], true
	}
}
