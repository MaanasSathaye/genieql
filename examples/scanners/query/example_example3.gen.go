package query

import "database/sql"

// DO NOT MODIFY: This File was auto generated by the following command:
// genieql scanner query-literal --output=example_example3.gen.go example query
// invoked by go generate @ query/example.go line 8

const ExampleQueryScannerStaticColumns = ""

// NewExampleQueryScannerStatic creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewExampleQueryScannerStatic(rows *sql.Rows, err error) ExampleScanner {
	if err != nil {
		return errExampleScanner{e: err}
	}

	return exampleQueryScannerStatic{
		Rows: rows,
	}
}

type exampleQueryScannerStatic struct {
	Rows *sql.Rows
}

func (t exampleQueryScannerStatic) Scan(arg0 *example) error {
	var ()

	if err := t.Rows.Scan(); err != nil {
		return err
	}

	return t.Rows.Err()
}

func (t exampleQueryScannerStatic) Err() error {
	return t.Rows.Err()
}

func (t exampleQueryScannerStatic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

func (t exampleQueryScannerStatic) Next() bool {
	return t.Rows.Next()
}

// NewExampleQueryScannerStaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewExampleQueryScannerStaticRow(row *sql.Row) ExampleQueryScannerStaticRow {
	return ExampleQueryScannerStaticRow{
		row: row,
	}
}

type ExampleQueryScannerStaticRow struct {
	row *sql.Row
}

func (t ExampleQueryScannerStaticRow) Scan(arg0 *example) error {
	var ()

	if err := t.row.Scan(); err != nil {
		return err
	}

	return nil
}
