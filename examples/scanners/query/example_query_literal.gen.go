package query

import (
	"database/sql"

	"github.com/lib/pq"
)

// DO NOT MODIFY: This File was auto generated by the following command:
// genieql scanner query-literal --output=example_query_literal.gen.go bitbucket.org/jatone/genieql/examples/scanners/query.example bitbucket.org/jatone/genieql/examples/scanners/query.query
// invoked by go generate @ query/example.go line 12

const ExampleQueryScannerStaticColumns = "created,id,updated"

// NewExampleQueryScannerStatic creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewExampleQueryScannerStatic(rows *sql.Rows, err error) ExampleScanner {
	if err != nil {
		return errExampleScanner{e: err}
	}

	return exampleQueryScannerStatic{
		Rows: rows,
	}
}

type exampleQueryScannerStatic struct {
	Rows *sql.Rows
}

func (t exampleQueryScannerStatic) Scan(arg0 *example) error {
	var (
		c0 pq.NullTime
		c1 sql.NullInt64
		c2 pq.NullTime
	)

	if err := t.Rows.Scan(&c0, &c1, &c2); err != nil {
		return err
	}

	if c0.Valid {
		tmp := c0.Time
		arg0.created = tmp
	}

	if c1.Valid {
		tmp := int(c1.Int64)
		arg0.id = tmp
	}

	if c2.Valid {
		tmp := c2.Time
		arg0.updated = tmp
	}

	return t.Rows.Err()
}

func (t exampleQueryScannerStatic) Err() error {
	return t.Rows.Err()
}

func (t exampleQueryScannerStatic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

func (t exampleQueryScannerStatic) Next() bool {
	return t.Rows.Next()
}

// NewExampleQueryScannerStaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewExampleQueryScannerStaticRow(row *sql.Row) ExampleQueryScannerStaticRow {
	return ExampleQueryScannerStaticRow{
		row: row,
	}
}

type ExampleQueryScannerStaticRow struct {
	row *sql.Row
}

func (t ExampleQueryScannerStaticRow) Scan(arg0 *example) error {
	var (
		c0 pq.NullTime
		c1 sql.NullInt64
		c2 pq.NullTime
	)

	if err := t.row.Scan(&c0, &c1, &c2); err != nil {
		return err
	}

	if c0.Valid {
		tmp := c0.Time
		arg0.created = tmp
	}

	if c1.Valid {
		tmp := int(c1.Int64)
		arg0.id = tmp
	}

	if c2.Valid {
		tmp := c2.Time
		arg0.updated = tmp
	}

	return nil
}
