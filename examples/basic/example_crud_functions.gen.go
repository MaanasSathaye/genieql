package basic

import (
	"database/sql"
	"time"

	"bitbucket.org/jatone/genieql/internal/sqlx"
	"github.com/jackc/pgtype"
)

// DO NOT MODIFY: This File was auto generated by the following command:
// genieql generate experimental crud --output=example_crud_functions.gen.go --table=example3 --unique-scanner=NewExampleScannerStaticRow --scanner=NewExampleScannerStatic example
// invoked by go generate @ basic/example.go line 12

// exampleInsert generated by genieql
func exampleInsert(q sqlx.Queryer, arg1 example) ExampleScannerStaticRow {
	const query = `INSERT INTO example3 ("created","email","id","updated") VALUES ($1,$2,$3,$4) RETURNING "created","email","id","updated"`
	var (
		c0 pgtype.Timestamptz
		c1 pgtype.Text
		c2 pgtype.Int8
		c3 pgtype.Timestamptz
	)

	if err := c0.Set(arg1.Created); err != nil {
		return NewExampleScannerStaticRow(nil).Err(err)
	}

	if err := c1.Set(arg1.Email); err != nil {
		return NewExampleScannerStaticRow(nil).Err(err)
	}

	if err := c2.Set(arg1.ID); err != nil {
		return NewExampleScannerStaticRow(nil).Err(err)
	}

	if err := c3.Set(arg1.Updated); err != nil {
		return NewExampleScannerStaticRow(nil).Err(err)
	}

	return NewExampleScannerStaticRow(q.QueryRow(query, c0, c1, c2, c3))
}

// exampleFindByCreated generated by genieql
func exampleFindByCreated(q sqlx.Queryer, created time.Time) ExampleScannerStaticRow {
	const query = `SELECT "created","email","id","updated" FROM example3 WHERE "created" = $1`
	var (
		c0 sql.NullTime
	)

	c0.Valid = true
	c0.Time = created

	return NewExampleScannerStaticRow(q.QueryRow(query, c0))
}

// exampleLookupByCreated generated by genieql
func exampleLookupByCreated(q sqlx.Queryer, created time.Time) ExampleScanner {
	const query = `SELECT "created","email","id","updated" FROM example3 WHERE "created" = $1`
	var (
		c0 sql.NullTime
	)

	c0.Valid = true
	c0.Time = created

	return NewExampleScannerStatic(q.Query(query, c0))
}

// exampleFindByEmail generated by genieql
func exampleFindByEmail(q sqlx.Queryer, email string) ExampleScannerStaticRow {
	const query = `SELECT "created","email","id","updated" FROM example3 WHERE "email" = $1`
	var (
		c0 sql.NullString
	)

	c0.Valid = true
	c0.String = email

	return NewExampleScannerStaticRow(q.QueryRow(query, c0))
}

// exampleLookupByEmail generated by genieql
func exampleLookupByEmail(q sqlx.Queryer, email string) ExampleScanner {
	const query = `SELECT "created","email","id","updated" FROM example3 WHERE "email" = $1`
	var (
		c0 sql.NullString
	)

	c0.Valid = true
	c0.String = email

	return NewExampleScannerStatic(q.Query(query, c0))
}

// exampleFindByID generated by genieql
func exampleFindByID(q sqlx.Queryer, id int) ExampleScannerStaticRow {
	const query = `SELECT "created","email","id","updated" FROM example3 WHERE "id" = $1`
	var (
		c0 sql.NullInt64
	)

	c0.Valid = true
	c0.Int64 = int64(id)

	return NewExampleScannerStaticRow(q.QueryRow(query, c0))
}

// exampleLookupByID generated by genieql
func exampleLookupByID(q sqlx.Queryer, id int) ExampleScanner {
	const query = `SELECT "created","email","id","updated" FROM example3 WHERE "id" = $1`
	var (
		c0 sql.NullInt64
	)

	c0.Valid = true
	c0.Int64 = int64(id)

	return NewExampleScannerStatic(q.Query(query, c0))
}

// exampleFindByUpdated generated by genieql
func exampleFindByUpdated(q sqlx.Queryer, updated time.Time) ExampleScannerStaticRow {
	const query = `SELECT "created","email","id","updated" FROM example3 WHERE "updated" = $1`
	var (
		c0 sql.NullTime
	)

	c0.Valid = true
	c0.Time = updated

	return NewExampleScannerStaticRow(q.QueryRow(query, c0))
}

// exampleLookupByUpdated generated by genieql
func exampleLookupByUpdated(q sqlx.Queryer, updated time.Time) ExampleScanner {
	const query = `SELECT "created","email","id","updated" FROM example3 WHERE "updated" = $1`
	var (
		c0 sql.NullTime
	)

	c0.Valid = true
	c0.Time = updated

	return NewExampleScannerStatic(q.Query(query, c0))
}

// exampleFindByKey generated by genieql
func exampleFindByKey(q sqlx.Queryer, id int) ExampleScannerStaticRow {
	const query = `SELECT "created","email","id","updated" FROM example3 WHERE "id" = $1`
	var (
		c0 sql.NullInt64
	)

	c0.Valid = true
	c0.Int64 = int64(id)

	return NewExampleScannerStaticRow(q.QueryRow(query, c0))
}

// exampleUpdateByID generated by genieql
func exampleUpdateByID(q sqlx.Queryer, id int, update example) ExampleScannerStaticRow {
	const query = `UPDATE example3 SET "created" = $1, "email" = $2, "updated" = $3 WHERE "id" = $4 RETURNING "created","email","updated"`
	var (
		c0 sql.NullInt64
		c1 pgtype.Timestamptz
		c2 pgtype.Text
		c3 pgtype.Int8
		c4 pgtype.Timestamptz
	)

	c0.Valid = true
	c0.Int64 = int64(id)

	if err := c1.Set(update.Created); err != nil {
		return NewExampleScannerStaticRow(nil).Err(err)
	}

	if err := c2.Set(update.Email); err != nil {
		return NewExampleScannerStaticRow(nil).Err(err)
	}

	if err := c3.Set(update.ID); err != nil {
		return NewExampleScannerStaticRow(nil).Err(err)
	}

	if err := c4.Set(update.Updated); err != nil {
		return NewExampleScannerStaticRow(nil).Err(err)
	}

	return NewExampleScannerStaticRow(q.QueryRow(query, c0, c1, c2, c3, c4))
}

// exampleDeleteByID generated by genieql
func exampleDeleteByID(q sqlx.Queryer, id int) ExampleScannerStaticRow {
	const query = `DELETE FROM example3 WHERE "id" = $1 RETURNING "created","email","id","updated"`
	var (
		c0 sql.NullInt64
	)

	c0.Valid = true
	c0.Int64 = int64(id)

	return NewExampleScannerStaticRow(q.QueryRow(query, c0))
}
