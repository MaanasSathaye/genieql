package basic

import (
	"database/sql"

	"github.com/lib/pq"
)

// DO NOT MODIFY: This File was auto generated by the following command:
// genieql scanner default --output=example_default_scanner.gen.go example example3
// invoked by go generate @ basic/example.go line 8

// ExampleScanner scanner interface.
type ExampleScanner interface {
	Scan(arg0 *example) error
	Next() bool
	Close() error
	Err() error
}

type errExampleScanner struct {
	e error
}

func (t errExampleScanner) Scan(arg0 *example) error {
	return t.e
}

func (t errExampleScanner) Next() bool {
	return false
}

func (t errExampleScanner) Err() error {
	return t.e
}

func (t errExampleScanner) Close() error {
	return nil
}

const ExampleScannerStaticColumns = "created,email,id,updated"

// NewExampleScannerStatic creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewExampleScannerStatic(rows *sql.Rows, err error) ExampleScanner {
	if err != nil {
		return errExampleScanner{e: err}
	}

	return exampleScannerStatic{
		Rows: rows,
	}
}

type exampleScannerStatic struct {
	Rows *sql.Rows
}

func (t exampleScannerStatic) Scan(arg0 *example) error {
	var (
		c0 pq.NullTime
		c1 sql.NullString
		c2 sql.NullInt64
		c3 pq.NullTime
	)

	if err := t.Rows.Scan(&c0, &c1, &c2, &c3); err != nil {
		return err
	}

	if c0.Valid {
		tmp := c0.Time
		arg0.Created = tmp
	}

	if c1.Valid {
		tmp := c1.String
		arg0.Email = &tmp
	}

	if c2.Valid {
		tmp := int(c2.Int64)
		arg0.ID = tmp
	}

	if c3.Valid {
		tmp := c3.Time
		arg0.Updated = tmp
	}

	return t.Rows.Err()
}

func (t exampleScannerStatic) Err() error {
	return t.Rows.Err()
}

func (t exampleScannerStatic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

func (t exampleScannerStatic) Next() bool {
	return t.Rows.Next()
}

// NewExampleScannerStaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewExampleScannerStaticRow(row *sql.Row) ExampleScannerStaticRow {
	return ExampleScannerStaticRow{
		row: row,
	}
}

type ExampleScannerStaticRow struct {
	row *sql.Row
}

func (t ExampleScannerStaticRow) Scan(arg0 *example) error {
	var (
		c0 pq.NullTime
		c1 sql.NullString
		c2 sql.NullInt64
		c3 pq.NullTime
	)

	if err := t.row.Scan(&c0, &c1, &c2, &c3); err != nil {
		return err
	}

	if c0.Valid {
		tmp := c0.Time
		arg0.Created = tmp
	}

	if c1.Valid {
		tmp := c1.String
		arg0.Email = &tmp
	}

	if c2.Valid {
		tmp := int(c2.Int64)
		arg0.ID = tmp
	}

	if c3.Valid {
		tmp := c3.Time
		arg0.Updated = tmp
	}

	return nil
}
