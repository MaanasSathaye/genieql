package basic

import (
	"database/sql"

	"github.com/jackc/pgtype"
)

// DO NOT MODIFY: This File was auto generated by the following command:
// genieql scanner dynamic --output=example_dynamic_scanner.gen.go example example3
// invoked by go generate @ basic/example.go line 9

// NewExampleScannerDynamic creates a scanner that operates on a dynamic
// set of columns that can be returned in any subset/order.
func NewExampleScannerDynamic(rows *sql.Rows, err error) ExampleScanner {
	if err != nil {
		return errExampleScanner{e: err}
	}

	return exampleScannerDynamic{
		Rows: rows,
	}
}

// exampleScannerDynamic generated by genieql
type exampleScannerDynamic struct {
	Rows *sql.Rows
}

// Scan generated by genieql
func (t exampleScannerDynamic) Scan(arg0 *example) error {
	const (
		cn0 = "created"
		cn1 = "email"
		cn2 = "id"
		cn3 = "updated"
	)
	var (
		ignored sql.RawBytes
		err     error
		columns []string
		dst     []interface{}
		c0      pgtype.Timestamptz
		c1      pgtype.Text
		c2      pgtype.Int8
		c3      pgtype.Timestamptz
	)

	if columns, err = t.Rows.Columns(); err != nil {
		return err
	}

	dst = make([]interface{}, 0, len(columns))

	for _, column := range columns {
		switch column {
		case cn0:
			dst = append(dst, &c0)
		case cn1:
			dst = append(dst, &c1)
		case cn2:
			dst = append(dst, &c2)
		case cn3:
			dst = append(dst, &c3)
		default:
			dst = append(dst, &ignored)
		}
	}

	if err := t.Rows.Scan(dst...); err != nil {
		return err
	}

	for _, column := range columns {
		switch column {
		case cn0:
			if c0.Valid {
				tmp := c0.Time
				arg0.Created = tmp
			}
		case cn1:
			if c1.Valid {
				tmp := c1.String
				arg0.Email = &tmp
			}
		case cn2:
			if c2.Valid {
				tmp := c2.Int
				arg0.ID = tmp
			}
		case cn3:
			if c3.Valid {
				tmp := c3.Time
				arg0.Updated = tmp
			}
		}
	}

	return t.Rows.Err()
}

// Err generated by genieql
func (t exampleScannerDynamic) Err() error {
	return t.Rows.Err()
}

// Close generated by genieql
func (t exampleScannerDynamic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

// Next generated by genieql
func (t exampleScannerDynamic) Next() bool {
	return t.Rows.Next()
}
