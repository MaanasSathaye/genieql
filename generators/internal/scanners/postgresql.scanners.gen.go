package scanners

import (
	"database/sql"

	"bitbucket.org/jatone/genieql/generators/internal/scanners/alternate1"
	"bitbucket.org/jatone/genieql/generators/internal/scanners/alternate2"
	"github.com/lib/pq"
)

// DO NOT MODIFY: This File was auto generated by the following command:
// genieql generate experimental scanners types --config=generators-test.config -o postgresql.scanners.gen.go
// invoked by go generate @ scanners/type1.go line 9

// ComboScanner scanner interface.
type ComboScanner interface {
	Scan(t1 *alternate1.Type1, t2 *alternate2.Type1, t3 *Type1) error
	Next() bool
	Close() error
	Err() error
}

type errComboScanner struct {
	e error
}

func (t errComboScanner) Scan(t1 *alternate1.Type1, t2 *alternate2.Type1, t3 *Type1) error {
	return t.e
}

func (t errComboScanner) Next() bool {
	return false
}

func (t errComboScanner) Err() error {
	return t.e
}

func (t errComboScanner) Close() error {
	return nil
}

// NewComboScannerStatic creates a scanner that operates on a static
// set of columns that are always returned in the same order.
func NewComboScannerStatic(rows *sql.Rows, err error) ComboScanner {
	if err != nil {
		return errComboScanner{e: err}
	}

	return comboScannerStatic{
		Rows: rows,
	}
}

type comboScannerStatic struct {
	Rows *sql.Rows
}

func (t comboScannerStatic) Scan(t1 *alternate1.Type1, t2 *alternate2.Type1, t3 *Type1) error {
	var (
		c0  sql.NullString
		c1  sql.NullString
		c2  sql.NullBool
		c3  sql.NullBool
		c4  sql.NullInt64
		c5  sql.NullInt64
		c6  pq.NullTime
		c7  pq.NullTime
		c8  sql.NullInt64
		c9  sql.NullString
		c10 sql.NullString
		c11 sql.NullBool
		c12 sql.NullBool
		c13 sql.NullInt64
		c14 sql.NullInt64
		c15 pq.NullTime
		c16 pq.NullTime
		c17 sql.NullInt64
		c18 sql.NullString
		c19 sql.NullString
		c20 sql.NullBool
		c21 sql.NullBool
		c22 sql.NullInt64
		c23 sql.NullInt64
		c24 pq.NullTime
		c25 pq.NullTime
	)

	if err := t.Rows.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18, &c19, &c20, &c21, &c22, &c23, &c24, &c25); err != nil {
		return err
	}

	if c0.Valid {
		tmp := c0.String
		t1.Field1 = tmp
	}

	if c1.Valid {
		tmp := c1.String
		t1.Field2 = &tmp
	}

	if c2.Valid {
		tmp := c2.Bool
		t1.Field3 = tmp
	}

	if c3.Valid {
		tmp := c3.Bool
		t1.Field4 = &tmp
	}

	if c4.Valid {
		tmp := int(c4.Int64)
		t1.Field5 = tmp
	}

	if c5.Valid {
		tmp := int(c5.Int64)
		t1.Field6 = &tmp
	}

	if c6.Valid {
		tmp := c6.Time
		t1.Field7 = tmp
	}

	if c7.Valid {
		tmp := c7.Time
		t1.Field8 = &tmp
	}

	if c8.Valid {
		tmp := int(c8.Int64)
		t1.Unmappedfield = tmp
	}

	if c9.Valid {
		tmp := c9.String
		t2.Field1 = tmp
	}

	if c10.Valid {
		tmp := c10.String
		t2.Field2 = &tmp
	}

	if c11.Valid {
		tmp := c11.Bool
		t2.Field3 = tmp
	}

	if c12.Valid {
		tmp := c12.Bool
		t2.Field4 = &tmp
	}

	if c13.Valid {
		tmp := int(c13.Int64)
		t2.Field5 = tmp
	}

	if c14.Valid {
		tmp := int(c14.Int64)
		t2.Field6 = &tmp
	}

	if c15.Valid {
		tmp := c15.Time
		t2.Field7 = tmp
	}

	if c16.Valid {
		tmp := c16.Time
		t2.Field8 = &tmp
	}

	if c17.Valid {
		tmp := int(c17.Int64)
		t2.Unmappedfield = tmp
	}

	if c18.Valid {
		tmp := c18.String
		t3.Field1 = tmp
	}

	if c19.Valid {
		tmp := c19.String
		t3.Field2 = &tmp
	}

	if c20.Valid {
		tmp := c20.Bool
		t3.Field3 = tmp
	}

	if c21.Valid {
		tmp := c21.Bool
		t3.Field4 = &tmp
	}

	if c22.Valid {
		tmp := int(c22.Int64)
		t3.Field5 = tmp
	}

	if c23.Valid {
		tmp := int(c23.Int64)
		t3.Field6 = &tmp
	}

	if c24.Valid {
		tmp := c24.Time
		t3.Field7 = tmp
	}

	if c25.Valid {
		tmp := c25.Time
		t3.Field8 = &tmp
	}

	return t.Rows.Err()
}

func (t comboScannerStatic) Err() error {
	return t.Rows.Err()
}

func (t comboScannerStatic) Close() error {
	if t.Rows == nil {
		return nil
	}
	return t.Rows.Close()
}

func (t comboScannerStatic) Next() bool {
	return t.Rows.Next()
}

// NewComboScannerStaticRow creates a scanner that operates on a static
// set of columns that are always returned in the same order, only scans a single row.
func NewComboScannerStaticRow(row *sql.Row) ComboScannerStaticRow {
	return ComboScannerStaticRow{
		row: row,
	}
}

type ComboScannerStaticRow struct {
	row *sql.Row
}

func (t ComboScannerStaticRow) Scan(t1 *alternate1.Type1, t2 *alternate2.Type1, t3 *Type1) error {
	var (
		c0  sql.NullString
		c1  sql.NullString
		c2  sql.NullBool
		c3  sql.NullBool
		c4  sql.NullInt64
		c5  sql.NullInt64
		c6  pq.NullTime
		c7  pq.NullTime
		c8  sql.NullInt64
		c9  sql.NullString
		c10 sql.NullString
		c11 sql.NullBool
		c12 sql.NullBool
		c13 sql.NullInt64
		c14 sql.NullInt64
		c15 pq.NullTime
		c16 pq.NullTime
		c17 sql.NullInt64
		c18 sql.NullString
		c19 sql.NullString
		c20 sql.NullBool
		c21 sql.NullBool
		c22 sql.NullInt64
		c23 sql.NullInt64
		c24 pq.NullTime
		c25 pq.NullTime
	)

	if err := t.row.Scan(&c0, &c1, &c2, &c3, &c4, &c5, &c6, &c7, &c8, &c9, &c10, &c11, &c12, &c13, &c14, &c15, &c16, &c17, &c18, &c19, &c20, &c21, &c22, &c23, &c24, &c25); err != nil {
		return err
	}

	if c0.Valid {
		tmp := c0.String
		t1.Field1 = tmp
	}

	if c1.Valid {
		tmp := c1.String
		t1.Field2 = &tmp
	}

	if c2.Valid {
		tmp := c2.Bool
		t1.Field3 = tmp
	}

	if c3.Valid {
		tmp := c3.Bool
		t1.Field4 = &tmp
	}

	if c4.Valid {
		tmp := int(c4.Int64)
		t1.Field5 = tmp
	}

	if c5.Valid {
		tmp := int(c5.Int64)
		t1.Field6 = &tmp
	}

	if c6.Valid {
		tmp := c6.Time
		t1.Field7 = tmp
	}

	if c7.Valid {
		tmp := c7.Time
		t1.Field8 = &tmp
	}

	if c8.Valid {
		tmp := int(c8.Int64)
		t1.Unmappedfield = tmp
	}

	if c9.Valid {
		tmp := c9.String
		t2.Field1 = tmp
	}

	if c10.Valid {
		tmp := c10.String
		t2.Field2 = &tmp
	}

	if c11.Valid {
		tmp := c11.Bool
		t2.Field3 = tmp
	}

	if c12.Valid {
		tmp := c12.Bool
		t2.Field4 = &tmp
	}

	if c13.Valid {
		tmp := int(c13.Int64)
		t2.Field5 = tmp
	}

	if c14.Valid {
		tmp := int(c14.Int64)
		t2.Field6 = &tmp
	}

	if c15.Valid {
		tmp := c15.Time
		t2.Field7 = tmp
	}

	if c16.Valid {
		tmp := c16.Time
		t2.Field8 = &tmp
	}

	if c17.Valid {
		tmp := int(c17.Int64)
		t2.Unmappedfield = tmp
	}

	if c18.Valid {
		tmp := c18.String
		t3.Field1 = tmp
	}

	if c19.Valid {
		tmp := c19.String
		t3.Field2 = &tmp
	}

	if c20.Valid {
		tmp := c20.Bool
		t3.Field3 = tmp
	}

	if c21.Valid {
		tmp := c21.Bool
		t3.Field4 = &tmp
	}

	if c22.Valid {
		tmp := int(c22.Int64)
		t3.Field5 = tmp
	}

	if c23.Valid {
		tmp := int(c23.Int64)
		t3.Field6 = &tmp
	}

	if c24.Valid {
		tmp := c24.Time
		t3.Field7 = tmp
	}

	if c25.Valid {
		tmp := c25.Time
		t3.Field8 = &tmp
	}

	return nil
}
