package alternate2

import (
	"time"

	"bitbucket.org/jatone/genieql/internal/sqlx"
)

// DO NOT MODIFY: This File was auto generated by the following command:
// genieql generate experimental crud --config=generators-test.config -o postgresql.crud.functions.gen.go --table=type1 --scanner=NewType1ScannerStatic --unique-scanner=NewType1ScannerStaticRow Type1
// invoked by go generate @ alternate2/10_genieql.go line 5

// Type1Insert generated by genieql
func Type1Insert(q sqlx.Queryer, arg1 Type1) Type1ScannerStaticRow {
	const query = `INSERT INTO type1 ("field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield"`
	return NewType1ScannerStaticRow(q.QueryRow(query, arg1.Field1, arg1.Field2, arg1.Field3, arg1.Field4, arg1.Field5, arg1.Field6, arg1.Field7, arg1.Field8, arg1.Unmappedfield))
}

// Type1FindByField1 generated by genieql
func Type1FindByField1(q sqlx.Queryer, field1 string) Type1ScannerStaticRow {
	const query = `SELECT "field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield" FROM type1 WHERE "field1" = $1`
	return NewType1ScannerStaticRow(q.QueryRow(query, field1))
}

// Type1LookupByField1 generated by genieql
func Type1LookupByField1(q sqlx.Queryer, field1 string) Type1Scanner {
	const query = `SELECT "field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield" FROM type1 WHERE "field1" = $1`
	return NewType1ScannerStatic(q.Query(query, field1))
}

// Type1FindByField2 generated by genieql
func Type1FindByField2(q sqlx.Queryer, field2 string) Type1ScannerStaticRow {
	const query = `SELECT "field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield" FROM type1 WHERE "field2" = $1`
	return NewType1ScannerStaticRow(q.QueryRow(query, field2))
}

// Type1LookupByField2 generated by genieql
func Type1LookupByField2(q sqlx.Queryer, field2 string) Type1Scanner {
	const query = `SELECT "field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield" FROM type1 WHERE "field2" = $1`
	return NewType1ScannerStatic(q.Query(query, field2))
}

// Type1FindByField3 generated by genieql
func Type1FindByField3(q sqlx.Queryer, field3 bool) Type1ScannerStaticRow {
	const query = `SELECT "field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield" FROM type1 WHERE "field3" = $1`
	return NewType1ScannerStaticRow(q.QueryRow(query, field3))
}

// Type1LookupByField3 generated by genieql
func Type1LookupByField3(q sqlx.Queryer, field3 bool) Type1Scanner {
	const query = `SELECT "field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield" FROM type1 WHERE "field3" = $1`
	return NewType1ScannerStatic(q.Query(query, field3))
}

// Type1FindByField4 generated by genieql
func Type1FindByField4(q sqlx.Queryer, field4 bool) Type1ScannerStaticRow {
	const query = `SELECT "field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield" FROM type1 WHERE "field4" = $1`
	return NewType1ScannerStaticRow(q.QueryRow(query, field4))
}

// Type1LookupByField4 generated by genieql
func Type1LookupByField4(q sqlx.Queryer, field4 bool) Type1Scanner {
	const query = `SELECT "field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield" FROM type1 WHERE "field4" = $1`
	return NewType1ScannerStatic(q.Query(query, field4))
}

// Type1FindByField5 generated by genieql
func Type1FindByField5(q sqlx.Queryer, field5 int) Type1ScannerStaticRow {
	const query = `SELECT "field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield" FROM type1 WHERE "field5" = $1`
	return NewType1ScannerStaticRow(q.QueryRow(query, field5))
}

// Type1LookupByField5 generated by genieql
func Type1LookupByField5(q sqlx.Queryer, field5 int) Type1Scanner {
	const query = `SELECT "field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield" FROM type1 WHERE "field5" = $1`
	return NewType1ScannerStatic(q.Query(query, field5))
}

// Type1FindByField6 generated by genieql
func Type1FindByField6(q sqlx.Queryer, field6 int) Type1ScannerStaticRow {
	const query = `SELECT "field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield" FROM type1 WHERE "field6" = $1`
	return NewType1ScannerStaticRow(q.QueryRow(query, field6))
}

// Type1LookupByField6 generated by genieql
func Type1LookupByField6(q sqlx.Queryer, field6 int) Type1Scanner {
	const query = `SELECT "field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield" FROM type1 WHERE "field6" = $1`
	return NewType1ScannerStatic(q.Query(query, field6))
}

// Type1FindByField7 generated by genieql
func Type1FindByField7(q sqlx.Queryer, field7 time.Time) Type1ScannerStaticRow {
	const query = `SELECT "field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield" FROM type1 WHERE "field7" = $1`
	return NewType1ScannerStaticRow(q.QueryRow(query, field7))
}

// Type1LookupByField7 generated by genieql
func Type1LookupByField7(q sqlx.Queryer, field7 time.Time) Type1Scanner {
	const query = `SELECT "field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield" FROM type1 WHERE "field7" = $1`
	return NewType1ScannerStatic(q.Query(query, field7))
}

// Type1FindByField8 generated by genieql
func Type1FindByField8(q sqlx.Queryer, field8 time.Time) Type1ScannerStaticRow {
	const query = `SELECT "field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield" FROM type1 WHERE "field8" = $1`
	return NewType1ScannerStaticRow(q.QueryRow(query, field8))
}

// Type1LookupByField8 generated by genieql
func Type1LookupByField8(q sqlx.Queryer, field8 time.Time) Type1Scanner {
	const query = `SELECT "field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield" FROM type1 WHERE "field8" = $1`
	return NewType1ScannerStatic(q.Query(query, field8))
}

// Type1FindByUnmappedfield generated by genieql
func Type1FindByUnmappedfield(q sqlx.Queryer, unmappedfield int) Type1ScannerStaticRow {
	const query = `SELECT "field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield" FROM type1 WHERE "unmappedfield" = $1`
	return NewType1ScannerStaticRow(q.QueryRow(query, unmappedfield))
}

// Type1LookupByUnmappedfield generated by genieql
func Type1LookupByUnmappedfield(q sqlx.Queryer, unmappedfield int) Type1Scanner {
	const query = `SELECT "field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield" FROM type1 WHERE "unmappedfield" = $1`
	return NewType1ScannerStatic(q.Query(query, unmappedfield))
}

// Type1FindByKey generated by genieql
func Type1FindByKey(q sqlx.Queryer, field1 string) Type1ScannerStaticRow {
	const query = `SELECT "field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield" FROM type1 WHERE "field1" = $1`
	return NewType1ScannerStaticRow(q.QueryRow(query, field1))
}

// Type1UpdateByID generated by genieql
func Type1UpdateByID(q sqlx.Queryer, field1 string, update Type1) Type1ScannerStaticRow {
	const query = `UPDATE type1 SET "field2" = $1, "field3" = $2, "field4" = $3, "field5" = $4, "field6" = $5, "field7" = $6, "field8" = $7, "unmappedfield" = $8 WHERE "field1" = $9 RETURNING "field2","field3","field4","field5","field6","field7","field8","unmappedfield"`
	return NewType1ScannerStaticRow(q.QueryRow(query, update.Field2, update.Field3, update.Field4, update.Field5, update.Field6, update.Field7, update.Field8, update.Unmappedfield, field1))
}

// Type1DeleteByID generated by genieql
func Type1DeleteByID(q sqlx.Queryer, field1 string) Type1ScannerStaticRow {
	const query = `DELETE FROM type1 WHERE "field1" = $1 RETURNING "field1","field2","field3","field4","field5","field6","field7","field8","unmappedfield"`
	return NewType1ScannerStaticRow(q.QueryRow(query, field1))
}
