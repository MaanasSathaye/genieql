package alternate1

import (
	"time"

	"bitbucket.org/jatone/genieql/internal/sqlx"
)

// DO NOT MODIFY: This File was auto generated by the following command:
// genieql generate experimental crud --config=generators-test.config -o postgresql.crud.functions.gen.go --table=type1 --scanner=NewScanner1Static --unique-scanner=NewScanner1StaticRow Type1
// invoked by go generate @ alternate1/10_genieql.go line 5

func Type1Insert(q sqlx.Queryer, arg1 Type1) Scanner1StaticRow {
	const query = `INSERT INTO type1 (field1,field2,field3,field4,field5,field6,field7,field8,unmappedfield) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING field1,field2,field3,field4,field5,field6,field7,field8,unmappedfield`
	return NewScanner1StaticRow(q.QueryRow(query, arg1.Field1, arg1.Field2, arg1.Field3, arg1.Field4, arg1.Field5, arg1.Field6, arg1.Field7, arg1.Field8, arg1.Unmappedfield))
}

func Type1FindByField1(q sqlx.Queryer, field1 string) Scanner1 {
	const query = `SELECT field1,field2,field3,field4,field5,field6,field7,field8,unmappedfield FROM type1 WHERE field1 = $1`
	return NewScanner1Static(q.Query(query, field1))
}

func Type1FindByField2(q sqlx.Queryer, field2 string) Scanner1 {
	const query = `SELECT field1,field2,field3,field4,field5,field6,field7,field8,unmappedfield FROM type1 WHERE field2 = $1`
	return NewScanner1Static(q.Query(query, field2))
}

func Type1FindByField3(q sqlx.Queryer, field3 bool) Scanner1 {
	const query = `SELECT field1,field2,field3,field4,field5,field6,field7,field8,unmappedfield FROM type1 WHERE field3 = $1`
	return NewScanner1Static(q.Query(query, field3))
}

func Type1FindByField4(q sqlx.Queryer, field4 bool) Scanner1 {
	const query = `SELECT field1,field2,field3,field4,field5,field6,field7,field8,unmappedfield FROM type1 WHERE field4 = $1`
	return NewScanner1Static(q.Query(query, field4))
}

func Type1FindByField5(q sqlx.Queryer, field5 int) Scanner1 {
	const query = `SELECT field1,field2,field3,field4,field5,field6,field7,field8,unmappedfield FROM type1 WHERE field5 = $1`
	return NewScanner1Static(q.Query(query, field5))
}

func Type1FindByField6(q sqlx.Queryer, field6 int) Scanner1 {
	const query = `SELECT field1,field2,field3,field4,field5,field6,field7,field8,unmappedfield FROM type1 WHERE field6 = $1`
	return NewScanner1Static(q.Query(query, field6))
}

func Type1FindByField7(q sqlx.Queryer, field7 time.Time) Scanner1 {
	const query = `SELECT field1,field2,field3,field4,field5,field6,field7,field8,unmappedfield FROM type1 WHERE field7 = $1`
	return NewScanner1Static(q.Query(query, field7))
}

func Type1FindByField8(q sqlx.Queryer, field8 time.Time) Scanner1 {
	const query = `SELECT field1,field2,field3,field4,field5,field6,field7,field8,unmappedfield FROM type1 WHERE field8 = $1`
	return NewScanner1Static(q.Query(query, field8))
}

func Type1FindByUnmappedfield(q sqlx.Queryer, unmappedfield int) Scanner1 {
	const query = `SELECT field1,field2,field3,field4,field5,field6,field7,field8,unmappedfield FROM type1 WHERE unmappedfield = $1`
	return NewScanner1Static(q.Query(query, unmappedfield))
}

func Type1FindByKey(q sqlx.Queryer, field1 string) Scanner1StaticRow {
	const query = `SELECT field1,field2,field3,field4,field5,field6,field7,field8,unmappedfield FROM type1 WHERE field1 = $1`
	return NewScanner1StaticRow(q.QueryRow(query, field1))
}

func Type1UpdateByID(q sqlx.Queryer, field1 string, update Type1) Scanner1StaticRow {
	const query = `UPDATE type1 SET field2 = $1, field3 = $2, field4 = $3, field5 = $4, field6 = $5, field7 = $6, field8 = $7, unmappedfield = $8 WHERE field1 = $9 RETURNING field1,field2,field3,field4,field5,field6,field7,field8,unmappedfield`
	return NewScanner1StaticRow(q.QueryRow(query, update.Field2, update.Field3, update.Field4, update.Field5, update.Field6, update.Field7, update.Field8, update.Unmappedfield, field1))
}

func Type1DeleteByID(q sqlx.Queryer, field1 string) Scanner1StaticRow {
	const query = `DELETE FROM type1 WHERE field1 = $1 RETURNING field1,field2,field3,field4,field5,field6,field7,field8,unmappedfield`
	return NewScanner1StaticRow(q.QueryRow(query, field1))
}
