package functions

import "github.com/jackc/pgtype"

// DO NOT MODIFY: This File was auto generated by the following command:
// genieql generate insert --suffix=WithDefaults -o postgresql.insert.gen.go --default=id --default=text_field --default=created_at --default=updated_at Example1 example1
// invoked by go generate @ functions/functions.go line 7

// Example1InsertWithDefaultsStaticColumns generated by genieql
const Example1InsertWithDefaultsStaticColumns = `$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,DEFAULT,$23,$24,$25`

// Example1InsertWithDefaultsExplode generated by genieql
func Example1InsertWithDefaultsExplode(arg1 *Example1) ([]interface{}, error) {
	var (
		c0  pgtype.Int8
		c1  pgtype.Bit
		c2  pgtype.Varbit
		c3  pgtype.Bool
		c4  pgtype.Bytea
		c5  pgtype.Varchar
		c6  pgtype.BPChar
		c7  pgtype.CIDR
		c8  pgtype.Numeric
		c9  pgtype.Float8
		c10 pgtype.Inet
		c11 pgtype.Int2Array
		c12 pgtype.Int4Array
		c13 pgtype.Int8Array
		c14 pgtype.Int4
		c15 pgtype.Interval
		c16 pgtype.JSON
		c17 pgtype.JSONB
		c18 pgtype.Macaddr
		c19 pgtype.Numeric
		c20 pgtype.Float4
		c21 pgtype.Int2
		c22 pgtype.Timestamptz
		c23 pgtype.UUIDArray
		c24 pgtype.UUID
	)

	if err := c0.Set(arg1.BigintField); err != nil {
		return []interface{}(nil), err
	}

	if err := c1.Set(arg1.BitField); err != nil {
		return []interface{}(nil), err
	}

	if err := c2.Set(arg1.BitVaryingField); err != nil {
		return []interface{}(nil), err
	}

	if err := c3.Set(arg1.BoolField); err != nil {
		return []interface{}(nil), err
	}

	if err := c4.Set(arg1.ByteArrayField); err != nil {
		return []interface{}(nil), err
	}

	if err := c5.Set(arg1.CharacterField); err != nil {
		return []interface{}(nil), err
	}

	if err := c6.Set(arg1.CharacterFixedField); err != nil {
		return []interface{}(nil), err
	}

	if err := c7.Set(arg1.CidrField); err != nil {
		return []interface{}(nil), err
	}

	if err := c8.Set(arg1.DecimalField); err != nil {
		return []interface{}(nil), err
	}

	if err := c9.Set(arg1.DoublePrecisionField); err != nil {
		return []interface{}(nil), err
	}

	if err := c10.Set(arg1.InetField); err != nil {
		return []interface{}(nil), err
	}

	if err := c11.Set(arg1.Int2Array); err != nil {
		return []interface{}(nil), err
	}

	if err := c12.Set(arg1.Int4Array); err != nil {
		return []interface{}(nil), err
	}

	if err := c13.Set(arg1.Int8Array); err != nil {
		return []interface{}(nil), err
	}

	if err := c14.Set(arg1.IntField); err != nil {
		return []interface{}(nil), err
	}

	if err := c15.Set(arg1.IntervalField); err != nil {
		return []interface{}(nil), err
	}

	if err := c16.Set(arg1.JSONField); err != nil {
		return []interface{}(nil), err
	}

	if err := c17.Set(arg1.JsonbField); err != nil {
		return []interface{}(nil), err
	}

	if err := c18.Set(arg1.MacaddrField); err != nil {
		return []interface{}(nil), err
	}

	if err := c19.Set(arg1.NumericField); err != nil {
		return []interface{}(nil), err
	}

	if err := c20.Set(arg1.RealField); err != nil {
		return []interface{}(nil), err
	}

	if err := c21.Set(arg1.SmallintField); err != nil {
		return []interface{}(nil), err
	}

	if err := c22.Set(arg1.TimestampField); err != nil {
		return []interface{}(nil), err
	}

	if err := c23.Set(arg1.UUIDArray); err != nil {
		return []interface{}(nil), err
	}

	if err := c24.Set(arg1.UUIDField); err != nil {
		return []interface{}(nil), err
	}

	return []interface{}{c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24}, nil
}

const Example1InsertWithDefaults = `INSERT INTO example1 ("bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,DEFAULT,$23,$24,$25) RETURNING "bigint_field","bit_field","bit_varying_field","bool_field","byte_array_field","character_field","character_fixed_field","cidr_field","decimal_field","double_precision_field","inet_field","int2_array","int4_array","int8_array","int_field","interval_field","json_field","jsonb_field","macaddr_field","numeric_field","real_field","smallint_field","text_field","timestamp_field","uuid_array","uuid_field"`
