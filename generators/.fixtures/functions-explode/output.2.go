package example

import (
	"math"
	"time"

	"github.com/jackc/pgtype"
)

// explodeFunction1 generated by genieql
func explodeFunction1(arg1 *Foo) ([]interface{}, error) {
	var (
		c0 pgtype.Int8
		c1 pgtype.Int8
		c2 pgtype.Bool
		c3 pgtype.Timestamptz
		c4 pgtype.Timestamptz
	)

	if err := c0.Set(arg1.field1); err != nil {
		return []interface{}(nil), err
	}

	if err := c1.Set(arg1.field2); err != nil {
		return []interface{}(nil), err
	}

	if err := c2.Set(arg1.field3); err != nil {
		return []interface{}(nil), err
	}

	switch arg1.field4 {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c3.Set(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c3.Set(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c3.Set(arg1.field4); err != nil {
			return []interface{}(nil), err
		}
	}

	switch *arg1.field5 {
	case time.Unix(math.MaxInt64-62135596800, 999999999):
		if err := c4.Set(pgtype.Infinity); err != nil {
			return []interface{}(nil), err
		}
	case time.Unix(math.MinInt64, math.MinInt64):
		if err := c4.Set(pgtype.NegativeInfinity); err != nil {
			return []interface{}(nil), err
		}
	default:
		if err := c4.Set(arg1.field5); err != nil {
			return []interface{}(nil), err
		}
	}

	return []interface{}{c0, c1, c2, c3, c4}, nil
}
